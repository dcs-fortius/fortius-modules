{
  "language": "Solidity",
  "sources": {
    "contracts/FortiusSafeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.18;\n\ncontract Enum {\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n}\n\ninterface GnosisSafe {\n    function nonce() external returns (uint256);\n\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external;\n\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures\n    ) external payable returns (bool success);\n}\n\ninterface GnosisSafeProxyFactory {\n    function createProxyWithNonce(\n        address _singleton,\n        bytes memory initializer,\n        uint256 saltNonce\n    ) external returns (GnosisSafe proxy);\n}\n\ncontract FortiusSafeFactory {\n    GnosisSafeProxyFactory public safeFactory;\n    address public singleton;\n    mapping(address => string) public name;\n\n    constructor(address _safeFactory, address _singleton) {\n        require(_safeFactory != address(0), \"Invalid factory address provided\");\n        require(_singleton != address(0), \"Invalid singleton address provided\");\n        safeFactory = GnosisSafeProxyFactory(_safeFactory);\n        singleton = _singleton;\n    }\n\n    function deploy(\n        string calldata _name,\n        address[] calldata _owners,\n        uint256 _threshold,\n        uint256 saltNonce,\n        address[] calldata _modules\n    ) external returns (GnosisSafe proxy) {\n        address[] memory tempOwners = new address[](_owners.length + 1);\n        for (uint i = 0; i < _owners.length; i++) {\n            tempOwners[i] = _owners[i];\n        }\n        tempOwners[_owners.length] = address(this);\n\n        bytes memory initializer = abi.encodeWithSelector(\n            GnosisSafe.setup.selector,\n            tempOwners,\n            1,\n            address(0),\n            \"\",\n            address(0),\n            address(0),\n            0,\n            payable(0)\n        );\n        proxy = safeFactory.createProxyWithNonce(\n            singleton,\n            initializer,\n            saltNonce\n        );\n        for (uint i = 0; i < _modules.length; i++) {\n            require(\n                _execute(\n                    proxy,\n                    abi.encodeWithSignature(\n                        \"enableModule(address)\",\n                        _modules[i]\n                    )\n                ),\n                \"Enable module error\"\n            );\n        }\n        require(\n            _execute(\n                proxy,\n                abi.encodeWithSignature(\n                    \"removeOwner(address,address,uint256)\",\n                    _owners[_owners.length - 1],\n                    address(this),\n                    _threshold\n                )\n            ),\n            \"Update owner error\"\n        );\n        name[address(proxy)] = _name;\n    }\n\n    function _execute(\n        GnosisSafe proxy,\n        bytes memory data\n    ) internal returns (bool success) {\n        return\n            proxy.execTransaction(\n                address(proxy),\n                0,\n                data,\n                Enum.Operation.Call,\n                0,\n                0,\n                0,\n                address(0),\n                payable(0),\n                abi.encode(\n                    bytes32(uint256(uint160(address(this)))),\n                    bytes32(0),\n                    bytes1(uint8(1))\n                )\n            );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}