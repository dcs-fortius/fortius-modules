{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/Enum.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity =0.8.28;\n\n/// @title Enum - Collection of enums\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract Enum {\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n}\n"
    },
    "contracts/FortiusSafeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.28;\n\nimport {Enum} from \"./Enum.sol\";\n\ninterface GnosisSafe {\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external;\n\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures\n    ) external payable returns (bool success);\n}\n\ninterface GnosisSafeProxyFactory {\n    function createProxyWithNonce(\n        address _singleton,\n        bytes memory initializer,\n        uint256 saltNonce\n    ) external returns (GnosisSafe proxy);\n}\n\ncontract FortiusSafeFactory {\n    GnosisSafeProxyFactory public safeFactory;\n    address public singleton;\n    mapping(address => string) public name;\n\n    constructor(address _safeFactory, address _singleton) {\n        require(_safeFactory != address(0), \"Invalid factory address provided\");\n        require(_singleton != address(0), \"Invalid singleton address provided\");\n        safeFactory = GnosisSafeProxyFactory(_safeFactory);\n        singleton = _singleton;\n    }\n\n    function deploy(\n        string calldata _name,\n        address[] calldata _owners,\n        uint256 _threshold,\n        uint256 saltNonce,\n        address[] calldata _modules\n    ) external returns (GnosisSafe proxy) {\n        address[] memory tempOwners = new address[](_owners.length + 1);\n        for (uint i = 0; i < _owners.length; i++) {\n            tempOwners[i] = _owners[i];\n        }\n        tempOwners[_owners.length] = address(this);\n\n        bytes memory initializer = abi.encodeWithSelector(\n            GnosisSafe.setup.selector,\n            tempOwners,\n            1,\n            address(0),\n            \"\",\n            address(0),\n            address(0),\n            0,\n            payable(0)\n        );\n        proxy = safeFactory.createProxyWithNonce(\n            singleton,\n            initializer,\n            saltNonce\n        );\n        for (uint i = 0; i < _modules.length; i++) {\n            require(\n                _execute(\n                    proxy,\n                    abi.encodeWithSignature(\n                        \"enableModule(address)\",\n                        _modules[i]\n                    )\n                ),\n                \"Enable module error\"\n            );\n        }\n        require(\n            _execute(\n                proxy,\n                abi.encodeWithSignature(\n                    \"removeOwner(address,address,uint256)\",\n                    _owners[_owners.length - 1],\n                    address(this),\n                    _threshold\n                )\n            ),\n            \"Update owner error\"\n        );\n        name[address(proxy)] = _name;\n    }\n\n    function _execute(\n        GnosisSafe proxy,\n        bytes memory data\n    ) internal returns (bool success) {\n        return\n            proxy.execTransaction(\n                address(proxy),\n                0,\n                data,\n                Enum.Operation.Call,\n                0,\n                0,\n                0,\n                address(0),\n                payable(0),\n                abi.encode(\n                    bytes32(uint256(uint160(address(this)))),\n                    bytes32(0),\n                    bytes1(uint8(1))\n                )\n            );\n    }\n}\n"
    },
    "contracts/PermissionModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.28;\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Enum} from \"./Enum.sol\";\n\ninterface GnosisSafe {\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation\n    ) external returns (bool success);\n\n    function isOwner(address owner) external view returns (bool);\n\n    function getThreshold() external view returns (uint256);\n}\n\ncontract PermissionModule {\n    string public constant NAME = \"Permission Module\";\n    string public constant VERSION = \"0.1.1\";\n    enum Role {\n        None,\n        Trader,\n        Approver,\n        Owner\n    }\n    enum TxStatus {\n        Proposed,\n        Approved,\n        Executed,\n        Cancelled\n    }\n\n    struct Transaction {\n        address[] recipients;\n        uint256[] values;\n        bytes data;\n        Enum.Operation operation;\n        TxStatus status;\n        uint256 approvals;\n    }\n\n    mapping(address => mapping(address => Role)) public roles;\n    mapping(address => mapping(bytes32 => Transaction)) public transactions;\n\n    event TransactionProposed(\n        address indexed safe,\n        bytes32 indexed txHash,\n        address indexed proposer\n    );\n    event TransactionApproved(\n        address indexed safe,\n        bytes32 indexed txHash,\n        address indexed approver,\n        uint256 approvals\n    );\n    event TransactionExecuted(\n        address indexed safe,\n        bytes32 indexed txHash,\n        address executor\n    );\n    event TransactionCancelled(\n        address indexed safe,\n        bytes32 indexed txHash,\n        address canceller\n    );\n\n    modifier onlyRole(address safe, Role role) {\n        if (role == Role.Owner) {\n            require(\n                GnosisSafe(safe).isOwner(msg.sender),\n                \"Not authorized: Only Owner\"\n            );\n        } else {\n            require(roles[safe][msg.sender] == role, \"Not authorized\");\n        }\n        _;\n    }\n\n    function setRole(\n        address safe,\n        address user,\n        Role role\n    ) external onlyRole(safe, Role.Owner) {\n        roles[safe][user] = role;\n    }\n\n    function propose(\n        address safe,\n        address[] calldata recipients,\n        uint256[] calldata values,\n        bytes calldata data,\n        Enum.Operation operation\n    )\n        external\n        onlyRole(safe, Role.Trader)\n        onlyRole(safe, Role.Owner)\n        returns (bytes32)\n    {\n        require(\n            recipients.length == values.length,\n            \"Recipients and values length mismatch\"\n        );\n\n        bytes32 txHash = keccak256(\n            abi.encode(safe, recipients, values, data, operation)\n        );\n        require(\n            transactions[safe][txHash].status == TxStatus.Proposed,\n            \"Transaction already exists\"\n        );\n\n        transactions[safe][txHash] = Transaction({\n            recipients: recipients,\n            values: values,\n            data: data,\n            operation: operation,\n            status: TxStatus.Proposed,\n            approvals: 0\n        });\n\n        emit TransactionProposed(safe, txHash, msg.sender);\n        return txHash;\n    }\n\n    function approve(\n        address safe,\n        bytes32 txHash\n    ) external onlyRole(safe, Role.Approver) onlyRole(safe, Role.Owner) {\n        Transaction storage txn = transactions[safe][txHash];\n        require(\n            txn.status == TxStatus.Proposed,\n            \"Transaction not proposed or already approved\"\n        );\n\n        txn.approvals += 1;\n        emit TransactionApproved(safe, txHash, msg.sender, txn.approvals);\n\n        if (txn.approvals >= GnosisSafe(safe).getThreshold()) {\n            txn.status = TxStatus.Approved;\n        }\n    }\n\n    function execute(\n        address safe,\n        bytes32 txHash\n    ) external onlyRole(safe, Role.Owner) {\n        Transaction storage txn = transactions[safe][txHash];\n        require(txn.status == TxStatus.Approved, \"Transaction not approved\");\n        require(\n            txn.approvals >= GnosisSafe(safe).getThreshold(),\n            \"Insufficient approvals\"\n        );\n\n        txn.status = TxStatus.Executed;\n        emit TransactionExecuted(safe, txHash, msg.sender);\n\n        for (uint256 i = 0; i < txn.recipients.length; i++) {\n            require(\n                GnosisSafe(safe).execTransactionFromModule(\n                    txn.recipients[i],\n                    txn.values[i],\n                    txn.data,\n                    txn.operation\n                ),\n                \"Transaction execution failed\"\n            );\n        }\n    }\n\n    function cancel(\n        address safe,\n        bytes32 txHash\n    ) external onlyRole(safe, Role.Owner) {\n        Transaction storage txn = transactions[safe][txHash];\n        require(\n            txn.status == TxStatus.Proposed,\n            \"Transaction not proposed or already processed\"\n        );\n\n        txn.status = TxStatus.Cancelled;\n        emit TransactionCancelled(safe, txHash, msg.sender); // Corrected argument order\n    }\n}\n"
    },
    "contracts/TimelockModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Enum} from \"./Enum.sol\";\n\ninterface GnosisSafe {\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation\n    ) external returns (bool success);\n}\n\ncontract TimelockModule {\n    string public constant NAME = \"Timelock Module\";\n    string public constant VERSION = \"0.1.1\";\n\n    event TransferScheduled(\n        bytes32 indexed id,\n        address indexed safe,\n        uint256 timestamp\n    );\n    event TransferExecuted(bytes32 indexed id, address indexed safe);\n    event TransferCancelled(bytes32 indexed id, address indexed safe);\n\n    struct TransferItem {\n        address token;\n        address[] recipients;\n        uint256[] values;\n        uint256 timestamp;\n        bool escrow;\n        bool cancellable;\n        bool executed;\n        bool canceled;\n    }\n\n    mapping(address => mapping(bytes32 => TransferItem)) private _scheduled;\n\n    receive() external payable {}\n\n    function hashOperation(\n        address safe,\n        address token,\n        address[] calldata recipients,\n        uint256[] calldata values,\n        uint256 timestamp,\n        bool escrow,\n        bool cancellable,\n        bytes32 salt\n    ) public pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    safe,\n                    token,\n                    recipients,\n                    values,\n                    timestamp,\n                    escrow,\n                    cancellable,\n                    salt\n                )\n            );\n    }\n\n    function schedule(\n        address token,\n        address[] calldata recipients,\n        uint256[] calldata values,\n        uint256 timestamp,\n        bool escrow,\n        bool cancellable,\n        bytes32 salt\n    ) public {\n        require(timestamp > block.timestamp, \"Invalid timestamp\");\n        require(recipients.length == values.length, \"Length mismatch\");\n        bytes32 id = hashOperation(\n            msg.sender,\n            token,\n            recipients,\n            values,\n            timestamp,\n            escrow,\n            cancellable,\n            salt\n        );\n        require(_scheduled[msg.sender][id].timestamp == 0, \"Item existed\");\n        emit TransferScheduled(id, msg.sender, timestamp);\n        if (escrow) {\n            _escrow(GnosisSafe(msg.sender), token, values);\n        }\n        _scheduled[msg.sender][id] = TransferItem(\n            token,\n            recipients,\n            values,\n            timestamp,\n            escrow,\n            cancellable,\n            false,\n            false\n        );\n    }\n\n    function execute(address safe, bytes32 id) public {\n        TransferItem storage item = _scheduled[safe][id];\n        require(item.timestamp > 0, \"Item not found\");\n        require(!item.executed, \"Item executed\");\n        require(!item.canceled, \"Item canceled\");\n        require(item.timestamp <= block.timestamp, \"Too early\");\n        emit TransferExecuted(id, msg.sender);\n        item.executed = true;\n        if (!item.escrow) {\n            _escrow(GnosisSafe(safe), item.token, item.values);\n        }\n        if (item.token == address(0)) {\n            for (uint256 i = 0; i < item.recipients.length; i++)\n                payable(item.recipients[i]).transfer(item.values[i]);\n        } else {\n            IERC20 token = IERC20(item.token);\n            for (uint256 i = 0; i < item.recipients.length; i++)\n                require(token.transfer(item.recipients[i], item.values[i]));\n        }\n    }\n\n    function cancel(bytes32 id) public {\n        TransferItem storage item = _scheduled[msg.sender][id];\n        require(item.timestamp > 0, \"Item not found\");\n        require(!item.executed, \"Item executed\");\n        require(!item.canceled, \"Item canceled\");\n        require(item.cancellable, \"Item not cancellable\");\n        emit TransferCancelled(id, msg.sender);\n        item.canceled = true;\n        if (item.escrow) {\n            uint256 amount = 0;\n            for (uint256 i = 0; i < item.values.length; i++) {\n                amount += item.values[i];\n            }\n            if (item.token == address(0)) {\n                payable(msg.sender).transfer(amount);\n            } else {\n                require(IERC20(item.token).transfer(msg.sender, amount));\n            }\n        }\n    }\n\n    function _escrow(\n        GnosisSafe safe,\n        address token,\n        uint256[] memory values\n    ) internal {\n        uint256 amount = 0;\n        for (uint256 i = 0; i < values.length; i++) {\n            amount += values[i];\n        }\n        if (token == address(0)) {\n            uint256 oldBalance = address(this).balance;\n            require(\n                safe.execTransactionFromModule(\n                    address(this),\n                    amount,\n                    \"\",\n                    Enum.Operation.Call\n                ),\n                \"Could not execute ether transfer\"\n            );\n            uint256 newBalance = address(this).balance;\n            require(newBalance == oldBalance + amount);\n        } else {\n            uint256 oldBalance = IERC20(token).balanceOf(address(this));\n            bytes memory data = abi.encodeWithSignature(\n                \"transfer(address,uint256)\",\n                address(this),\n                amount\n            );\n            require(\n                safe.execTransactionFromModule(\n                    token,\n                    0,\n                    data,\n                    Enum.Operation.Call\n                ),\n                \"Could not execute token transfer\"\n            );\n            uint256 newBalance = IERC20(token).balanceOf(address(this));\n            require(newBalance == oldBalance + amount);\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}