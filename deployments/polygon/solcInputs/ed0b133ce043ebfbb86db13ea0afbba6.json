{
  "language": "Solidity",
  "sources": {
    "contracts/FortiusCallback.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.18;\n\ncontract Enum {\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n}\n\ninterface GnosisSafe {\n    function nonce() external returns (uint256);\n\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation\n    ) external returns (bool success);\n\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures\n    ) external payable returns (bool success);\n\n    function approveHash(bytes32 hashToApprove) external;\n\n    function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) external returns (bytes32);\n\n    function enableModule(address module) external;\n}\n\ninterface IProxyCreationCallback {\n    function proxyCreated(\n        GnosisSafe proxy,\n        address _singleton,\n        bytes calldata initializer,\n        uint256 saltNonce\n    ) external;\n}\n\ncontract FortiusCallback is IProxyCreationCallback {\n    function aproveAndExecute(\n        GnosisSafe proxy,\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        uint256 nonce\n    ) internal {\n        // proxy.approveHash(\n        //     proxy.getTransactionHash(\n        //         to,\n        //         value,\n        //         data,\n        //         operation,\n        //         safeTxGas,\n        //         baseGas,\n        //         gasPrice,\n        //         gasToken,\n        //         refundReceiver,\n        //         nonce\n        //     )\n        // );\n        require(proxy.execTransaction(\n            to,\n            value,\n            data,\n            operation,\n            safeTxGas,\n            baseGas,\n            gasPrice,\n            gasToken,\n            refundReceiver,\n            abi.encode(\n                bytes32(uint256(uint160(address(this))) << 96),\n                bytes32(0),\n                bytes1(uint8(1))\n            )\n        ), \"execTransaction error\");\n    }\n\n    function proxyCreated(\n        GnosisSafe proxy,\n        address _singleton,\n        bytes calldata initializer,\n        uint256 saltNonce\n    ) external {\n        aproveAndExecute(\n            proxy,\n            address(proxy),\n            0,\n            abi.encodeWithSignature(\"enableModule(address)\", address(this)),\n            Enum.Operation.Call,\n            0,\n            0,\n            0,\n            address(0),\n            payable(0),\n            0\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}